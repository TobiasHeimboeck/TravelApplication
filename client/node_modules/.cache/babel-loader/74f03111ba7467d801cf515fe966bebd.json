{"ast":null,"code":"export var getCities = function getCities(cities) {\n  return {\n    type: 'GET_CITIES',\n    cities: cities\n  };\n};\nexport var citiesIsLoading = function citiesIsLoading(_citiesIsLoading) {\n  return {\n    type: 'CITIES_IS_LOADING',\n    citiesIsLoading: _citiesIsLoading\n  };\n};\nexport var fetch = function fetch(url, results) {\n  return function (dispatch) {\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      for (var i = 0; i < results.length; i++) {\n        dispatch(results[i]);\n      }\n    }).catch(function (e) {\n      return console.log(e);\n    });\n  };\n};\nexport var fetchCitiesData = function fetchCitiesData() {\n  return function (dispatch) {\n    fetch(\"/cities/all\").then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      dispatch(getCities(result));\n      dispatch(citiesIsLoading(false));\n    }).catch(function (e) {\n      return console.log(e);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/src/store/actions/actions.js"],"names":["getCities","cities","type","citiesIsLoading","fetch","url","results","dispatch","then","response","json","result","i","length","catch","e","console","log","fetchCitiesData"],"mappings":"AAAA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAAY;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,YADH;AAEHD,IAAAA,MAAM,EAANA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,IAAME,eAAe,GAAG,yBAACA,gBAAD,EAAqB;AAChD,SAAO;AACHD,IAAAA,IAAI,EAAE,mBADH;AAEHC,IAAAA,eAAe,EAAfA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,GAAD,EAAMC,OAAN,EAAkB;AACnC,SAAO,UAACC,QAAD,EAAc;AACjBH,IAAAA,KAAK,CAACC,GAAD,CAAL,CACKG,IADL,CACU,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADlB,EAEKF,IAFL,CAEU,UAAAG,MAAM,EAAI;AACZ,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCL,QAAAA,QAAQ,CAACD,OAAO,CAACM,CAAD,CAAR,CAAR;AACH;AACJ,KANL,EAOKE,KAPL,CAOW,UAAAC,CAAC;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ;AAAA,KAPZ;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjC,SAAO,UAACX,QAAD,EAAc;AACjBH,IAAAA,KAAK,CAAC,aAAD,CAAL,CACKI,IADL,CACU,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADlB,EAEKF,IAFL,CAEU,UAAAG,MAAM,EAAI;AACZJ,MAAAA,QAAQ,CAACP,SAAS,CAACW,MAAD,CAAV,CAAR;AACAJ,MAAAA,QAAQ,CAACJ,eAAe,CAAC,KAAD,CAAhB,CAAR;AACH,KALL,EAMKW,KANL,CAMW,UAAAC,CAAC;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ;AAAA,KANZ;AAOH,GARD;AASH,CAVM","sourcesContent":["export const getCities = (cities) => {\n    return {\n        type: 'GET_CITIES',\n        cities\n    }\n}\n\nexport const citiesIsLoading = (citiesIsLoading) => {\n    return {\n        type: 'CITIES_IS_LOADING',\n        citiesIsLoading\n    }\n}\n\nexport const fetch = (url, results) => {\n    return (dispatch) => {\n        fetch(url)\n            .then(response => response.json())\n            .then(result => {\n                for (var i = 0; i < results.length; i++) {\n                    dispatch(results[i]);\n                }\n            })\n            .catch(e => console.log(e));\n    }\n}\n\nexport const fetchCitiesData = () => {\n    return (dispatch) => {\n        fetch(\"/cities/all\")\n            .then(response => response.json())\n            .then(result => {\n                dispatch(getCities(result));\n                dispatch(citiesIsLoading(false));\n            })\n            .catch(e => console.log(e));\n    }\n}"]},"metadata":{},"sourceType":"module"}