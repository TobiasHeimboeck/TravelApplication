{"ast":null,"code":"import _classCallCheck from \"/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/src/containers/CitiesPage.js\";\nimport React from 'react';\nimport Sidebar from '../components/Sidebar.js';\nimport PreNavbar from '../components/PreNavbar.js';\nimport City from '../components/City.js';\nimport { connect } from \"react-redux\";\nimport * as actionCreator from '../store/actions/actions.js';\n\nvar CitiesPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CitiesPage, _React$Component);\n\n  function CitiesPage(props) {\n    var _this;\n\n    _classCallCheck(this, CitiesPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CitiesPage).call(this, props));\n\n    _this.handleChange = function (e) {\n      _this.setState({\n        cityFilter: e.target.value\n      });\n    };\n\n    _this.state = {\n      cityFilter: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(CitiesPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getCities();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.citiesIsLoading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        var cityName = this.state.cityFilter;\n\n        if (cityName === \"\") {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37\n            },\n            __self: this\n          }, React.createElement(Sidebar, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }), React.createElement(PreNavbar, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          }, React.createElement(\"h1\", {\n            id: \"header\",\n            className: \"cityTitle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }, \"Cities\"), React.createElement(\"input\", {\n            value: this.state.cityFilter,\n            onChange: this.handleChange,\n            className: \"cityFilter\",\n            type: \"text\",\n            placeholder: \"Search a city\",\n            name: \"Search city\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }), this.props.cities.map(function (item, index) {\n            return React.createElement(City, {\n              name: item.name,\n              image: item.image,\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45\n              },\n              __self: this\n            });\n          })));\n        } else {\n          for (var i = 0; i < this.props.cities.length; i++) {\n            if (this.props.cities[i].name === cityName) {\n              return React.createElement(\"div\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 56\n                },\n                __self: this\n              }, React.createElement(Sidebar, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 57\n                },\n                __self: this\n              }), React.createElement(PreNavbar, {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 58\n                },\n                __self: this\n              }), React.createElement(\"h1\", {\n                id: \"header\",\n                className: \"cityTitle\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 59\n                },\n                __self: this\n              }, \"Cities\"), React.createElement(\"input\", {\n                value: this.state.cityFilter,\n                onChange: this.handleChange,\n                className: \"cityFilter\",\n                type: \"text\",\n                placeholder: \"Search a city\",\n                name: \"Search city\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 60\n                },\n                __self: this\n              }), React.createElement(City, {\n                name: this.props.cities[i].name,\n                image: this.props.cities[i].image,\n                key: 0,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 61\n                },\n                __self: this\n              }));\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return CitiesPage;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: state.cities,\n    citiesIsLoading: state.citiesIsLoading\n  };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getCities: function getCities() {\n      return dispatch(actionCreator.fetchCitiesData());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);","map":{"version":3,"sources":["/Users/tobias/Documents/Programming/Ubiqum - coding/TravelApplication/client/src/containers/CitiesPage.js"],"names":["React","Sidebar","PreNavbar","City","connect","actionCreator","CitiesPage","props","handleChange","e","setState","cityFilter","target","value","state","getCities","citiesIsLoading","cityName","cities","map","item","index","name","image","i","length","Component","mapStateToProps","mapDispatchToProps","dispatch","fetchCitiesData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Sidebar from '../components/Sidebar.js';\nimport PreNavbar from '../components/PreNavbar.js';\nimport City from '../components/City.js';\nimport { connect } from \"react-redux\";\nimport * as actionCreator from '../store/actions/actions.js';\n\nclass CitiesPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cityFilter: \"\"\n        }\n    }\n    \n    handleChange = (e) => {\n        this.setState({\n            cityFilter: e.target.value\n        });\n    }\n\n    componentDidMount() {\n        this.props.getCities();\n    }\n\n    render() {\n        if (this.props.citiesIsLoading) {\n\n            return <div>Loading...</div>;\n\n        } else {\n\n            const cityName = this.state.cityFilter;\n\n            if (cityName === \"\") {\n                return (\n                    <div>\n                        <Sidebar />\n                        <PreNavbar />\n                    <div>\n                        <h1 id=\"header\" className=\"cityTitle\">Cities</h1>\n                        <input value={this.state.cityFilter} onChange={this.handleChange} className=\"cityFilter\" type=\"text\" placeholder=\"Search a city\" name=\"Search city\"></input>\n                        {\n                            this.props.cities.map((item, index) => (\n                                <City name={item.name} image={item.image} key={index} />\n                            ))\n                        }\n                    </div>\n                </div>\n                );\n            } else {\n\n                for (var i = 0; i < this.props.cities.length; i++) {\n                    if (this.props.cities[i].name === cityName) {\n                        return (\n                            <div>\n                                <Sidebar />\n                                    <PreNavbar />\n                                <h1 id=\"header\" className=\"cityTitle\">Cities</h1>\n                                <input value={this.state.cityFilter} onChange={this.handleChange} className=\"cityFilter\" type=\"text\" placeholder=\"Search a city\" name=\"Search city\"></input>\n                                <City name={this.props.cities[i].name} image={this.props.cities[i].image} key={0} />\n                            </div>\n                        );\n                    }\n                }\n\n            }\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cities: state.cities,\n        citiesIsLoading: state.citiesIsLoading\n    }\n}\n  \nfunction mapDispatchToProps(dispatch) {\n    return {\n        getCities: () => dispatch(actionCreator.fetchCitiesData()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (CitiesPage);"]},"metadata":{},"sourceType":"module"}